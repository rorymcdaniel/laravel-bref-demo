service: jetstream
useDotenv: true

provider:
    name: aws
    # The AWS region in which to deploy (us-east-1 is the default)
    region: us-east-1
    # The stage of the application, e.g. dev, production, stagingâ€¦ ('dev' is the default)
    stage: dev
    runtime: provided.al2
    lambdaHashingVersion: 20201221
    environment:
      APP_KEY: ${ssm:APP_KEY}
      APP_URL: ${ssm:APP_URL}
      APP_ENV: ${ssm:APP_ENV}
      APP_DEBUG: 'true'
      DB_HOST: ${ssm:DB_HOST}
      DB_PASSWORD: ${ssm:DB_PASSWORD}
      DB_USERNAME: ${ssm:DB_USERNAME}
      DB_DATABASE: ${ssm:DB_DATABASE}
      CACHE_DRIVER: array
      MAIL_HOST: smtp.mailtrap.io
      MAIL_PORT: 2525
      MAIL_USERNAME: ${ssm:MAIL_USERNAME}
      MAIL_PASSWORD: ${ssm:MAIL_PASSWORD}
      MAIL_ENCRYPTION: tls
      MAIL_FROM_ADDRESS: info@rorymcdaniel.com
      MAIL_FROM_NAME: "Jetstream Test App"
      LOG_CHANNEL: stderr
      SESSION_DRIVER: cookie
      ASSET_URL: ${ssm:ASSET_URL}
      MIX_ASSET_URL: ${ssm:ASSET_URL}


package:
    # Directories to exclude from deployment
    exclude:
        - node_modules/**
        - public/storage
        - resources/css/**
        - resources/js/**
        - storage/**
        - tests/**

functions:
    # This function runs the Laravel website/API
    web:
        handler: public/index.php
        timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
        layers:
            - ${bref:layer.php-80-fpm}
        events:
            -   httpApi: '*'
    # This function lets us run artisan commands in Lambda
    artisan:
        handler: artisan
        timeout: 120 # in seconds
        layers:
            - ${bref:layer.php-80} # PHP
            - ${bref:layer.console} # The "console" layer

plugins:
    # We need to include the Bref plugin
    - ./vendor/bref/bref

resources:
  Resources:
    # The S3 bucket that stores the assets
    Assets:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${ssm:ASSET_BUCKET}
    # The policy that makes the bucket publicly readable
    AssetsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref Assets # References the bucket we defined above
        PolicyDocument:
          Statement:
            -   Effect: Allow
                Principal: '*' # everyone
                Action: 's3:GetObject' # to read
                Resource: !Join ['/', [!GetAtt Assets.Arn, '*']] # things in the bucket
